package testframework

import (
	"context"
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/ipfs/iptb/testbed"
	"github.com/ipfs/iptb/testbed/interfaces"
)

type TestFn func(*testing.T, testbed.Testbed)

// NodeSpec is a direct copy of testbed.NodeSpec that does not include the Dir
// parameter, which is generated by this testing framework.
type NodeSpec struct {
	Type  string
	Attrs map[string]string
}

func (s *NodeSpec) testbedNodeSpec(root, name string) *testbed.NodeSpec {
	return &testbed.NodeSpec{
		Type:  s.Type,
		Dir:   filepath.Join(root, name),
		Attrs: s.Attrs,
	}
}

func WithTestbed(t *testing.T, specs map[string]*NodeSpec, wait bool, testfn TestFn) {
	root, err := ioutil.TempDir(os.TempDir(), "iptb.")
	if err != nil {
		t.Fatal(err)
	}

	// Prepare testbed
	nodes := make([]testbedi.Core, 0, len(specs))
	tbspecs := make([]*testbed.NodeSpec, 0, len(specs))
	for name, spec := range specs {
		tbspec := spec.testbedNodeSpec(root, name)
		if err := os.Mkdir(tbspec.Dir, os.ModePerm); err != nil {
			t.Fatal(err)
		}
		tbspecs = append(tbspecs, tbspec)
		node, err := tbspec.Load()
		if err != nil {
			t.Fatal(err)
		}
		nodes = append(nodes, node)
	}

	// Write nodespec.json
	err = testbed.WriteNodeSpecs(root, tbspecs)
	if err != nil {
		t.Fatal(err)
	}

	// Launch nodes
	for _, node := range nodes {
		ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
		defer cancel()
		_, err := node.Start(ctx, wait)
		if err != nil {
			t.Fatalf("starting node in dir %s: %s", node.Dir(), err)
		}
	}

	// Defer cleanup
	defer func() {
		// Stop nodes
		for _, node := range nodes {
			ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
			defer cancel()
			err := node.Stop(ctx)
			if err != nil {
				t.Errorf("stopping node in dir %s: %s", node.Dir(), err)
			}
		}

		// Clean up tempdir
		if err := os.RemoveAll(root); err != nil {
			t.Logf("failed to remote root dir: %s", err)
		}
	}()

	// Run the test
	tb := testbed.NewTestbed(root)
	testfn(t, &tb)
}
